/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Lexico;

import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 *
 * @author estudiantes
 */
public class FormAnalizador extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public FormAnalizador() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        BotonAnalisis = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        BotonAnalisis.setText("Analisis");
        BotonAnalisis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonAnalisisActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 556, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BotonAnalisis)
                .addGap(40, 40, 40))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(BotonAnalisis)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BotonAnalisisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonAnalisisActionPerformed
        int cont = 1;
        JFileChooser escoger = new JFileChooser();
        escoger.showOpenDialog(null);
        try {
            Reader lectura = new BufferedReader(new FileReader(escoger.getSelectedFile()));
            Lexico lexicos = new Lexico(lectura);
            String result = "";
            while (true) {
                Tokens tokens = lexicos.yylex();
                if (tokens == null) {
                    result += "Final";
                    //Resultado.setText(result);
                    return;
                }
                switch (tokens) {
                    case Linea:
                        cont++;
                        result += "LINEA " + cont + "\n";
                        break;
                    case Comillas:
                        result += " <Comillas>\t\t" + lexicos.lexeme + "\n";
                        break;
                    case Cadena:
                        result += " <Tipo de dato>\t" + lexicos.lexeme + "\n";
                        break;
                    case T_dato:

                        result += " <Tipo de dato>\t" + lexicos.lexeme + "\n";
                        break;
                    case If:
                        result += " <Reservada if>\t" + lexicos.lexeme + "\n";
                        break;
                    case Else:
                        result += " <Reservada else>\t" + lexicos.lexeme + "\n";
                        break;
                    case Do:
                        result += " <Reservada do>\t" + lexicos.lexeme + "\n";
                        break;
                    case While:
                        result += " <Reservada while>\t" + lexicos.lexeme + "\n";
                        break;
                    case For:
                        result += " <Reservada while>\t" + lexicos.lexeme + "\n";
                        break;
                    case Igual:
                        result += " <Operador igual>\t" + lexicos.lexeme + "\n";
                        break;
                    case Suma:
                        result += " <Operador suma>\t" + lexicos.lexeme + "\n";
                        break;
                    case Resta:
                        result += " <Operador resta>\t" + lexicos.lexeme + "\n";
                        break;
                    case Multiplicacion:
                        result += " <Operador multiplicacion>\t" + lexicos.lexeme + "\n";
                        break;

                    case Division:
                        result += " <Operador division>\t" + lexicos.lexeme + "\n";
                        break;
                    case Op_logico:
                        result += " <Operador logico>\t" + lexicos.lexeme + "\n";
                        break;
                    case Op_incremento:
                        result += " <Operador incremento>\t" + lexicos.lexeme + "\n";
                        break;
                    case Op_relacional:
                        result += " <Operador relacional>\t" + lexicos.lexeme + "\n";
                        break;
                    case Op_atribucion:
                        result += " <Operador atribucion>\t" + lexicos.lexeme + "\n";
                        break;
                    case Op_booleano:
                        result += " <Operador booleano>\t" + lexicos.lexeme + "\n";
                        break;
                    case Parentesis_a:
                        result += " <Parentesis de apertura>\t" + lexicos.lexeme + "\n";
                        break;
                    case Parentesis_c:
                        result += " <Parentesis de cierre>\t" + lexicos.lexeme + "\n";
                        break;
                    case Llave_a:
                        result += " <Llave de apertura>\t" + lexicos.lexeme + "\n";
                        break;
                    case Llave_c:
                        result += " <Llave de cierre>\t" + lexicos.lexeme + "\n";

                        break;
                    case Corchete_a:
                        result += " <Corchete de apertura>\t" + lexicos.lexeme + "\n";
                        break;
                    case Corchete_c:
                        result += " <Corchete de cierre>\t" + lexicos.lexeme + "\n";
                        break;
                    case Main:
                        result += " <Reservada main>\t" + lexicos.lexeme + "\n";
                        break;
                    case P_coma:
                        result += " <Punto y coma>\t" + lexicos.lexeme + "\n";
                        break;
                    case Identificador:
                        result += " <Identificador>\t\t" + lexicos.lexeme + "\n";
                        break;
                    case Numero:
                        result += " <Numero>\t\t" + lexicos.lexeme + "\n";
                        break;
                    case ERROR:
                        result += " <Simbolo no definido>\n";
                        break;
                    default:
                        result += " < " + lexicos.lexeme + " >\n";
                        break;
                }
            }
        } catch (FileNotFoundException ex) {

            Logger.getLogger(FormAnalizador.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FormAnalizador.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BotonAnalisisActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormAnalizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormAnalizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormAnalizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormAnalizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormAnalizador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonAnalisis;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
